"use client";

import { useState, useEffect } from "react";
import toast from "react-hot-toast";
import api from "../../../../api";
import { useRouter } from "next/navigation"; // For redirection

const CreateTest = ({ setActiveComponent }) => {
  const [testData, setTestData] = useState({
    title: "",
    description: "",
    duration: 60,
    total_marks: 100,
    passing_marks: 40,
    subject: "",
    topic: "",
    difficulty: "medium",
    instructions: "",
  });

  const [filters, setFilters] = useState({
    subject: "",
    topic: "",
    difficulty: "",
  });

  const [availableQuestions, setAvailableQuestions] = useState([]);
  const [selectedQuestions, setSelectedQuestions] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [openDialog, setOpenDialog] = useState(false); // To manage dialog visibility
  const [newTestId, setNewTestId] = useState(null); // Store created test ID
  const router = useRouter(); // To handle redirection

  const fetchQuestions = async () => {
    try {
      const res = await api.get("/questions/");
      const data = res?.data;

      if (Array.isArray(data)) {
        setAvailableQuestions(data);
      } else if (Array.isArray(data?.data)) {
        setAvailableQuestions(data.data);
      } else {
        setAvailableQuestions([]);
        toast.error("Unexpected response format.");
      }

      // Check for auto-generated test data after fetching questions
      const autoGeneratedData = localStorage.getItem("autoGeneratedTestData");
      if (autoGeneratedData) {
        const { subject, topic, difficulty, questionIds } =
          JSON.parse(autoGeneratedData);

        // Update test data
        setTestData((prev) => ({
          ...prev,
          subject,
          topic,
          difficulty,
        }));

        // Set selected questions
        setSelectedQuestions(questionIds);

        // Clear the data from localStorage
        localStorage.removeItem("autoGeneratedTestData");
      }
    } catch (error) {
      console.error("Fetch Error:", error);
      toast.error("Failed to load questions");
    }
  };

  useEffect(() => {
    fetchQuestions();
  }, []);

  // Add effect to scroll to selected questions
  useEffect(() => {
    if (selectedQuestions.length > 0) {
      // Find the first selected question element and scroll to it
      const firstSelectedQuestion =
        document.querySelector("[data-question-id]");
      if (firstSelectedQuestion) {
        firstSelectedQuestion.scrollIntoView({
          behavior: "smooth",
          block: "center",
        });
      }
    }
  }, [selectedQuestions]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (selectedQuestions.length === 0) {
      toast.error("Select at least one question!");
      return;
    }

    const payload = {
      ...testData,
      test_questions: selectedQuestions,
    };

    try {
      const res = await api.post("/tests/", payload);
      if (res.status === 201 || res.status === 200) {
        toast.success("Test created successfully!");
        setNewTestId(res.data.id); // Assuming response contains the test ID
        setOpenDialog(true); // Open the dialog
        setTestData({
          title: "",
          description: "",
          duration: 60,
          total_marks: 100,
          passing_marks: 40,
          subject: "",
          topic: "",
          difficulty: "medium",
          instructions: "",
        });
        setSelectedQuestions([]);
        setSearchQuery("");
        fetchQuestions();
      } else {
        toast.error("Failed to create test");
      }
    } catch (error) {
      console.error("Submit Error:", error);
      toast.error("Server error");
    }
  };

  const handleChange = (field, value) => {
    setTestData((prev) => ({ ...prev, [field]: value }));
    if (["subject", "topic", "difficulty"].includes(field)) {
      setFilters((prev) => ({ ...prev, [field]: value }));
    }
  };

  const filteredQuestions = availableQuestions.filter((q) => {
    return (
      q.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
      q.subject.toLowerCase().includes(searchQuery.toLowerCase()) ||
      q.topic.toLowerCase().includes(searchQuery.toLowerCase()) ||
      q.difficulty.toLowerCase().includes(searchQuery.toLowerCase())
    );
  });

  const handleAssignTest = () => {
    setActiveComponent("assign-test");
  };

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <h2 className="text-2xl font-bold mb-6 text-gray-800">Create New Test</h2>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Test Fields */}
        <div className="grid grid-cols-2 gap-6">
          <div>
            <label className="block font-medium mb-1">Test Title</label>
            <input
              type="text"
              value={testData.title}
              onChange={(e) => handleChange("title", e.target.value)}
              className="p-2 border rounded w-full"
              required
            />
          </div>

          <div>
            <label className="block font-medium mb-1">Subject</label>
            <input
              type="text"
              value={testData.subject}
              onChange={(e) => handleChange("subject", e.target.value)}
              className="p-2 border rounded w-full"
              required
            />
          </div>

          <div>
            <label className="block font-medium mb-1">Topic</label>
            <input
              type="text"
              value={testData.topic}
              onChange={(e) => handleChange("topic", e.target.value)}
              className="p-2 border rounded w-full"
              required
            />
          </div>

          <div>
            <label className="block font-medium mb-1">Difficulty</label>
            <select
              value={testData.difficulty}
              onChange={(e) => handleChange("difficulty", e.target.value)}
              className="p-2 border rounded w-full"
              required>
              <option value="easy">Easy</option>
              <option value="medium">Medium</option>
              <option value="hard">Hard</option>
            </select>
          </div>

          <div>
            <label className="block font-medium mb-1">Duration (minutes)</label>
            <input
              type="number"
              value={testData.duration}
              onChange={(e) =>
                handleChange("duration", parseInt(e.target.value))
              }
              className="p-2 border rounded w-full"
              required
            />
          </div>

          <div>
            <label className="block font-medium mb-1">Total Marks</label>
            <input
              type="number"
              value={testData.total_marks}
              onChange={(e) =>
                handleChange("total_marks", parseInt(e.target.value))
              }
              className="p-2 border rounded w-full"
              required
            />
          </div>

          <div>
            <label className="block font-medium mb-1">Passing Marks</label>
            <input
              type="number"
              value={testData.passing_marks}
              onChange={(e) =>
                handleChange("passing_marks", parseInt(e.target.value))
              }
              className="p-2 border rounded w-full"
              required
            />
          </div>
        </div>

        <div>
          <label className="block font-medium mb-1">Description</label>
          <textarea
            value={testData.description}
            onChange={(e) => handleChange("description", e.target.value)}
            className="p-2 border rounded w-full"
            rows={3}
            required
          />
        </div>

        <div>
          <label className="block font-medium mb-1">Instructions</label>
          <textarea
            value={testData.instructions}
            onChange={(e) => handleChange("instructions", e.target.value)}
            className="p-2 border rounded w-full"
            rows={3}
            required
          />
        </div>

        {/* Question Filters and Search */}
        <div>
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold mb-2">Select Questions</h3>
            <div className="flex gap-2">
              <input
                type="text"
                placeholder="Search questions..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="p-2 border rounded w-64"
              />
              <button
                type="button"
                onClick={fetchQuestions}
                className="bg-gray-200 px-4 py-1 rounded hover:bg-gray-300">
                ðŸ”„ Refresh
              </button>
            </div>
          </div>
        </div>

        {/* Question List */}
        <div className="max-h-96 overflow-y-auto border rounded-lg p-4">
          {filteredQuestions.length === 0 ? (
            <p className="text-gray-500">No questions found.</p>
          ) : (
            filteredQuestions.map((q) => (
              <div
                key={q.id}
                data-question-id={q.id}
                className={`flex items-start gap-3 mb-4 border-b pb-2 ${
                  selectedQuestions.includes(q.id) ? "bg-blue-50" : ""
                }`}>
                <input
                  type="checkbox"
                  checked={selectedQuestions.includes(q.id)}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setSelectedQuestions([...selectedQuestions, q.id]);
                    } else {
                      setSelectedQuestions(
                        selectedQuestions.filter((id) => id !== q.id)
                      );
                    }
                  }}
                  className="mt-1"
                />
                <div>
                  <p className="font-medium">{q.question}</p>
                  <div className="text-sm text-gray-600 flex gap-2 mt-1">
                    <span className="bg-blue-100 px-2 py-0.5 rounded">
                      {q.subject}
                    </span>
                    <span className="bg-purple-100 px-2 py-0.5 rounded">
                      {q.topic}
                    </span>
                    <span className="bg-yellow-100 px-2 py-0.5 rounded">
                      {q.difficulty}
                    </span>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>

        {/* Actions */}
        <div className="flex justify-end gap-4">
          <button
            type="button"
            onClick={() => {
              setTestData({
                title: "",
                description: "",
                duration: 60,
                total_marks: 100,
                passing_marks: 40,
                subject: "",
                topic: "",
                difficulty: "medium",
                instructions: "",
              });
              setSelectedQuestions([]);
              setSearchQuery("");
              toast.success("Form cleared");
            }}
            className="px-4 py-2 border rounded-lg hover:bg-gray-100">
            Clear
          </button>
          <button
            type="submit"
            className="px-6 py-2 bg-[#8b5dff] text-white rounded-lg hover:bg-[#7341d9]">
            Create Test
          </button>
        </div>
      </form>

      {/* Confirmation Dialog */}
      {openDialog && (
        <div className="fixed inset-0 flex items-center justify-center bg-gray-500 bg-opacity-50 z-10">
          <div className="bg-white p-6 rounded-lg shadow-lg">
            <h3 className="text-xl mb-4">Test Created</h3>
            <p>
              Your test has been created successfully. Would you like to assign
              it now?
            </p>
            <div className="flex justify-end gap-4 mt-4">
              <button
                onClick={() => setOpenDialog(false)}
                className="px-4 py-2 bg-gray-200 rounded-lg">
                No
              </button>
              <button
                onClick={handleAssignTest}
                className="px-4 py-2 bg-[#8b5dff] text-white rounded-lg">
                Yes
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CreateTest;
